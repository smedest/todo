
/* generated by: ControllerTestGenerator Sun Oct 23 19:54:38 CEST 2016 */
package com.littleworld.todo.controllers;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;
import static org.hamcrest.Matchers.*;

import java.util.ArrayList;
import java.util.List;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
import org.springframework.test.context.web.WebAppConfiguration;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.setup.MockMvcBuilders;
import org.springframework.web.context.WebApplicationContext;


import com.littleworld.todo.model.Todo;
import com.littleworld.todo.services.TodoService;

@RunWith(SpringJUnit4ClassRunner.class)
@WebAppConfiguration
@ContextConfiguration({ "file:src/main/webapp/WEB-INF/spring-context.xml" })
public class TodoContextControllerTest {

  @Autowired
  private WebApplicationContext wac;

  private MockMvc mockMvc;
  
  @Autowired
  private TodoService todoService;

  @Before
  public void setUp() throws Exception {
    mockMvc = MockMvcBuilders.webAppContextSetup(wac).build();
    todoService.createTodo(new Todo(0, "task0"));
    todoService.createTodo(new Todo(1, "task1"));

  }

 @Test
  public void testTodos() throws Exception {
    mockMvc.perform(get("/todos"))
    .andDo(print())
    .andExpect(status().isOk())
    .andExpect(view().name("todoList"))
    .andExpect(model().attribute("todos",hasSize(2)))

    .andExpect(model().attribute("todos", hasItem(
      allOf( 
        hasProperty("id", is(0)),
        hasProperty("task", is("task0"))
    ))))
    .andExpect(model().attribute("todos", hasItem(
      allOf( 
        hasProperty("id", is(1)),
        hasProperty("task", is("task1"))
    ))));
  }
}


